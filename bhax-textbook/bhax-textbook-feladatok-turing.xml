<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Turing!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Végtelen ciklus</title>
        <para>
            Írj olyan C végtelen ciklusokat, amelyek 0 illetve 100 százalékban dolgoztatnak egy magot és egy olyat, amely  
            100 százalékban minden magot!
        </para>
        <para>
            Megoldás forrása: <link xlink:href="Turing/ciklus0.c">
                <filename>ciklus0.c</filename>
            </link>; 
            <link xlink:href="Turing/ciklus1.c">
                <filename>ciklus1.c</filename>
            </link>; 
            <link xlink:href="Turing/ciklusall.c">
                <filename>ciklusall.c</filename>
            </link>
        </para>
        <para>
            A feladatba kicsit nehézkesen kezdtem bele, mivel végtelen ciklusokkal programozás során nem nagyon találkoztam,
            de egy kis keresgélés után megértettem, feldolgoztam az anyagot és megoldottam a feladatokat. Az alább használt <literal>while(1) {}</literal> ciklusokat azért választottam,
            mert szerintem ez az egyik legelterjedtebb és legegyszerűbb módszer. A <literal>while(1) {}</literal> azt jelenti, hogy addig fut a <literal>while</literal> ciklusban lévő kód,
            amíg teljesül az (1) feltétel, amely helyett boolean típusából kiindulva írhattam volna <literal>while(true)</literal>-t is. 
            Mivel itt nincs kód, ezért a ciklus a végtelenségig fut.
        </para>   
        <para>
             Elsőként az egymagos megoldást próbáltam ki,amely sikerült ezzel az egyszerű kóddal:
        </para>         
        <programlisting language="c">
<![CDATA[int main() {

  while(1) {}
  
return 0;
}]]>
        </programlisting>
        <para>
            Következőnek azt próbáltam ki, hogyan lehetne megoldani, hogy ne foglalja le a CPU-t futás közben. Ehhez elég volt egy <literal>sleep()</literal>-et
            beraknom a végtelen ciklusba.
        </para>
        <programlisting language="c">
<![CDATA[int main() {

 while (1) {
  sleep();
 }
 
return 0;
}]]>
        </programlisting>
        <para>
            A végére hagytam azt a feladatot, hogy a CPU minden magját leterhelje a program, ez már kicsit bonyolultabb volt, mivel OpenMP-t kellett hozzá használnom,
            ezért <literal>#include</literal>-olnom kellett az <literal>"omp.h"</literal> könyvtárat.
        </para>
        
            <programlisting language="c">
<![CDATA[#include <omp.h>

int main() {

#pragma omp parallel

 while(1) {}
return 0;
}]]>
        </programlisting>
        <para>
            Ezt már fordítanom is máshogy kellett, a megszokott <literal>gcc in -o out</literal> helyett <literal>gcc -o out -fopenmp in</literal> parancsot kellett használnom.
        </para>
    </section>        
        
    <section>
        <title>Lefagyott, nem fagyott, akkor most mi van?</title>
        <para>
            Mutasd meg, hogy nem lehet olyan programot írni, amely bármely más programról eldönti, hogy le fog-e fagyni vagy sem!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:  tegyük fel, hogy akkora haxorok vagyunk, hogy meg tudjuk írni a <function>Lefagy</function>
            függvényt, amely tetszőleges programról el tudja dönteni, hogy van-e benne vlgtelen ciklus:              
        </para>
        <programlisting language="c"><![CDATA[Program T100
{

	boolean Lefagy(Program P)
	{
		 if(P-ben van végtelen ciklus)
			return true;
		 else
			return false; 
	}

	main(Input Q)
	{
		Lefagy(Q)
	}
}]]></programlisting>            
        <para>
            A program futtatása, például akár az előző <filename>v.c</filename> ilyen pszeudókódjára:
            <screen><![CDATA[T100(t.c.pseudo)
true]]></screen>            
            akár önmagára
            <screen><![CDATA[T100(T100)
false]]></screen>  
            ezt a kimenetet adja.          
        </para>
        <para>
            A T100-as programot felhasználva készítsük most el az alábbi T1000-set, amelyben a
            Lefagy-ra épőlő Lefagy2 már nem tartalmaz feltételezett, csak csak konkrét kódot:
        </para>
        <programlisting language="c"><![CDATA[Program T1000
{

	boolean Lefagy(Program P)
	{
		 if(P-ben van végtelen ciklus)
			return true;
		 else
			return false; 
	}

	boolean Lefagy2(Program P)
	{
		 if(Lefagy(P))
			return true;
		 else
			for(;;); 
	}

	main(Input Q)
	{
		Lefagy2(Q)
	}

}]]></programlisting>           
        <para>
            Mit for kiírni erre a <computeroutput>T1000(T1000)</computeroutput> futtatásra?
                                
            <itemizedlist>
                <listitem>
                    <para>Ha T1000 lefagyó, akkor nem fog lefagyni, kiírja, hogy true</para>                        
                </listitem>
                <listitem>
                    <para>Ha T1000 nem fagyó, akkor pedig le fog fagyni...</para>                        
                </listitem>
            </itemizedlist>
            akkor most hogy fog működni? Sehogy, mert ilyen <function>Lefagy</function>
            függvényt, azaz a T100 program nem is létezik.                
        </para>
        <para>
            Az eredményünk a következő: Ha a T1000 program megálló program, akkor mégsem áll meg, hanem végtelen ciklusba esik; és ha a T1000 végtelen ciklusba eső gép, akkor megáll a T1000 gép.
            Így egy szép kis paradoxont kapunk, amit Alan Turing fedezett fel. A felfedezés szerint a megállási probléma nem dönthető el, mivel az egyetlen megoldása ennek
            az ellentmondásnak az, hogy a T100 program nem létezik, tehát az alábbi algoritmusunk sem.
        </para>
    </section>        
                
    <section>
        <title>Változók értékének felcserélése</title>
        <para>
            Írj olyan C programot, amely felcseréli két változó értékét, bármiféle logikai utasítás vagy kifejezés
            nasználata nélkül!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2018/08/28/10_begin_goto_20_avagy_elindulunk">https://bhaxor.blog.hu/2018/08/28/10_begin_goto_20_avagy_elindulunk</link>
        </para>
        <para>
            Megoldás forrása:<link xlink:href="Turing/csere.c">
                <filename>bhax/thematic_tutorials/bhax-textbook/Turing/csere.c</filename>
            </link>
        </para>
        <para>
            Először is, deklarálnunk kell a két változót, értéket kell adni nekik, aztán kell felcserélnünk őket. 
            Ezután hogy kimutassuk, a változók tényleg felcserélődnek-e, ki kell íratnunk a változók értékeit a <function>printf()</function> függvénnyel. Ehhez #include-olnunk kell a
            <literal>"stdio.h"</literal> könyvtárat, ebben van deklarálva a <function>printf()</function> függvényünk.
        </para>
<programlisting language="c">
<![CDATA[#include <stdio.h>

int main() {

int a = 33;
int b = 42;

printf("a = %d\nb = %d\n",a,b);

b = b - a;
a = a + b;
b = a - b;

printf("Felcserélés után:\na = %d\nb = %d\n",a,b);
return 0;
}]]>
</programlisting>
    </section>                     

    <section>
        <title>Labdapattogás</title>
        <para>
            Először if-ekkel, majd bármiféle logikai utasítás vagy kifejezés
            nasználata nélkül írj egy olyan programot, ami egy labdát pattogtat a karakteres konzolon! (Hogy mit értek
            pattogtatás alatt, alább láthatod a videókon.)
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2018/08/28/labdapattogas">https://bhaxor.blog.hu/2018/08/28/labdapattogas</link>
        </para>
        <para>
            Megoldás forrása:<link xlink:href="Turing/labda.c"><filename>labda.c</filename></link>;
            <link xlink:href="Turing/labdaif.c">
                <filename>labdaif.c</filename> </link>
        </para>
        <para>
            Az if-es megoldásban a labdának relatív "játszótere" van, ami attól függ, mekkora az ablak mérete; az if nélküli programban 
            viszont a labdánk fix kereteken belül mozoghat, ezt indikálja a két szaggatott(kötőjeles) vonalunk. A kód sikeres fordításához
            meg kell hívnunk a <literal>"curses.h"</literal> könyvtárat, ami a libncurses package-ben van, így előbb le kellett töltenünk azt.
            A kód működésének szíve és lelke a <literal>for (;;)</literal> végtelen ciklus, itt "mozog" a labdánk. A lényege, hogy ha a labdánk
            eléri az egyik falat, akkor elkezdjen menni az ellenkező irányba, a gyorsaságot pedig az <literal>usleep(100000)</literal> 
            függvény adja meg, ez 100ms-t jelent, vagyis a labda 0.1 másodpercenként mozog.
        </para>
    </section>                     

    <section>
        <title>Szóhossz és a Linus Torvalds féle BogoMIPS</title>
        <para>
            Írj egy programot, ami megnézi, hogy hány bites a szó a gépeden, azaz mekkora az <type>int</type> mérete.
            Használd ugyanazt a while ciklus fejet, amit Linus Torvalds a BogoMIPS rutinjában! 
        </para>
        <para>
            Megoldás videó: <link xlink:href=""></link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="Turing/szohossz.c">
                <filename>szohossz.c</filename>
            </link>
        </para>
        <para>
            A szóhossz megszámolásához szükségünk van a bitshift operátorra, ez található a <function>while</function> cikluson belül.
            Jelen ciklus azt csinálja, hogy az "a" változónkat addig shifteljük, vagyis addig léptetjük balra és adunk 0-t a jobb oldalára,
            amíg 0 nem lesz az értéke. Mindeközben minden shiftelésnél a "b" változó értékét is növeljük mindig 1-el, amíg le nem zárul a ciklus, így a
            "b" fogja nekünk kimutatni, hány bites a szó a gépünkön.
        </para>
    </section>                     

    <section>
        <title>Helló, Google!</title>
        <para>
            Írj olyan C programot, amely egy 4 honlapból álló hálózatra kiszámolja a négy lap Page-Rank 
            értékét!
        </para>
        <para>
            Megoldás videó: <link xlink:href=""></link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="Turing/pagerank.cpp"><filename>pagerank.c</filename></link>, <link xlink:href="https://arato.inf.unideb.hu/batfai.norbert/UDPROG/deprecated/Prog1_2.pdf">BN FerSML projekt dia 55-59.</link>
        </para>
        <para>
            Egy weboldal fontossága teljesen szubjektív; attól függ, mit keres az olvasó. Viszont objektíven is meg tudjuk közelíteni a weboldalakat, mégpedig úgy, hogy a relatív fontosságot nézzük. Erre való a PageRank módszer, ami objektíven méri, 
            az adott oldalt hányan keresik, vagyis más oldalak hányszor mutatnak rá.</para>
        <para>
        A PageRankot linkmátrix megoldással fogjuk megvalósítani, ebben segítenek nekünk az alábbi ábrák:
        <mediaobject>
                <imageobject>
                    <imagedata fileref="img/pra.png" scale="45" />
                </imageobject>
        </mediaobject>
        Itt ha <emphasis role="strong">h</emphasis> jelöli a PR vektort, akkor <emphasis role="strong">h=Lh</emphasis>
        </para>
    </section>

    <section xml:id="Brun">
        <title>100 éves a Brun tétel</title>
        <para>
            Írj R szimulációt a Brun tétel demonstrálására!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/xbYhp9G6VqQ">https://youtu.be/xbYhp9G6VqQ</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/Primek_R">https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/Primek_R</link>
        </para>
        <para>
            Az ikerprímek olyan prímpárok, melyek különbsége 2.</para>
            <para>Brun-tétel: Az ikerpríme reciprokösszege egy (Brun-konstans) véges értékhez konvergál. A prímek reciprokösszege divergens, ebből láthatjuk, hogy végtelen sok prímszám van.</para>
            <para>
                Nézzük is ezt az R szimulációban: <programlisting language="R"><![CDATA[library(matlab)

stp <- function(x){

    primes = primes(x)
    diff = primes[2:length(primes)]-primes[1:length(primes)-1]
    idx = which(diff==2)
    t1primes = primes[idx]
    t2primes = primes[idx]+2
    rt1plust2 = 1/t1primes+1/t2primes
    return(sum(rt1plust2))
}]]></programlisting>Ha még nem tettük meg, töltsük le a matlab könyvtárat, R-en belül <emphasis role="strong">install.packages("matlab")</emphasis>. 
Meghívjuk a matlab könyvtárat, majd megírjuk az <emphasis role="strong">stp</emphasis> függvényt. A függvény első sorában meghívunk egy <emphasis role="strong">primes(x)</emphasis> függvényt, ami az x prímeit adja vissza. Megírjuk a különbségfüggvényt, majd megnézzük, hogy hol 2 a különbség. A <emphasis role="strong">t1primes</emphasis> az ikerpár egyik tagja, az idx prímjeit mutatja; a <emphasis role="strong">t2primes</emphasis> a pár második tagja, szintén az idx prímjeit adja vissza,
és hozzáad 2-t. Elosztjuk 1-el a két változót, majd összeadjuk őket, végül pedig visszakapjuk az előbbi függvény összegét. Rajzoljuk is ki ezt a függvényt: <programlisting language="R"><![CDATA[x=seq(13, 1000000, by=10000)
y=sapply(x, FUN = stp)
plot(x,y,type="b")
]]></programlisting>
    <mediaobject>
        <imageobject>
            <imagedata fileref="img/brun.png" scale="45" />
        </imageobject>
    </mediaobject>
            </para>
    </section>
    
    <section xml:id="bhax-textbook-feladatok-turing.MontyHall">
        <title>A Monty Hall probléma</title>
        <para>
            Írj R szimulációt a Monty Hall problémára!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2019/01/03/erdos_pal_mit_keresett_a_nagykonyvben_a_monty_hall-paradoxon_kapcsan">https://bhaxor.blog.hu/2019/01/03/erdos_pal_mit_keresett_a_nagykonyvben_a_monty_hall-paradoxon_kapcsan</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/MontyHall_R">https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/MontyHall_R</link>
        </para>
        <para>
        A Monty Hall-paradoxon egy valószínűségi paradoxon, ami az USA-beli "Kössünk üzletet" című vetélkedő utolsó feladatán alapul. A paradoxon nevét Monty Hallról, a vetélkedő műsorvezetőjéről
        kapta. A lényege, hogy a műsorvezető bemutat három ajtót, amelyekből 2 ajtó túloldalán egy értéktelen nyeremény van, egy ajtó pedig egy értékes nyereményt rejt. A játékosnak ki kell választania
        egy ajtót, majd a műsorvezető kinyit egyet, amely egy értéktelen nyereményt tartalmaz. Ezután a játékosnak lehetősége van dönteni, hogy marad az eredetileg kiválasztott ajtajánál, vagy
        vált a másikra. Alapból a játékosnak 1/3 esélye van, hogy az értékes nyereményt találja el, és 2/3 esélye, hogy az értéktelent. Mivel kinyitották az egyik ajtót, így a játékos igazából
        50% hogy az értékes nyeremény ajtaját nyitja ki, szóval a paradoxon nagy kérdése az, hogy érdemes lenne-e változtatni, vagy hogy mindez számít-e egyáltalán.
        </para>
    </section>

</chapter>                
